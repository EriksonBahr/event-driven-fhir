@page "/fhir"

<PageTitle>FHIR</PageTitle>

@using Hl7.Fhir.Model
@using Hl7.Fhir.Serialization
@using System.Text
@using RabbitMQ.Client.Events;
@inject EventingBasicConsumer consumer

<h1>Event driven fhir data</h1>

<p>Devices are listed as soon events are published.</p>

@if (devices == null)
{
    <p><em>Waiting...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Last Updated</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in devices)
            {
                <tr>
                    <td>@d.Id</td>
                    <td>@d.DeviceName.FirstOrDefault().Name</td>
                    <td>@d.Meta.LastUpdated</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Device[]? devices;

    protected override void OnInitialized()
    {
            consumer.Received += async (_, ea) =>
            {
                if (devices == null) {
                    var list = new List<Device>();
                    devices = list.ToArray();
                }
                var body = ea.Body.ToArray();
                var message = Encoding.UTF8.GetString(body);
                var parser = new FhirJsonParser();
                var device = parser.Parse<Device>(message);
                devices = devices.Append(device).ToArray();
                await InvokeAsync(() => {
                     StateHasChanged();
                });
            };

    }

}
